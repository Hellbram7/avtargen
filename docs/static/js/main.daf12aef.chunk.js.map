{"version":3,"sources":["components/Avtargen.js","components/Cooltxt.js","components/Inputcomp.js","App.js","serviceWorker.js","index.js"],"names":["Avtargen","className","src","this","props","name","alt","Component","Cooltxt","Inputcomp","handleChange","event","x","target","value","handleClick","setState","username","state","inputVal","style","color","type","placeholder","onChange","onClick","App","textAlign","fontFamily","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAceA,G,MAXf,iLAEQ,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAG,sCAAiCC,KAAKC,MAAMC,KAAOF,KAAKC,MAAMC,KAAO,aAAeC,IAAI,UAChG,4BAAKH,KAAKC,MAAMC,WALhC,GAA8BE,cCUfC,G,YAVf,iLAEQ,OACI,kCAHZ,GAA6BD,cCsCdE,EApCf,YACI,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KAOVM,aAAe,SAACC,GACb,EAAKC,EAAID,EAAME,OAAOC,OATN,EAanBC,YAAc,WACV,EAAKC,SAAS,CAAEC,SAAU,EAAKL,KAZ/B,EAAKM,MAAQ,CACTC,SAAU,GACVF,SAAU,IAEd,EAAKL,EAAI,GANM,EADvB,sEAqBQ,OACI,6BACA,yBAAKX,UAAU,UACX,wBAAImB,MAAO,CAACC,MAAO,UAAWpB,UAAU,YAAxC,qBACA,2BAAOqB,KAAK,OAAOC,YAAY,aAAatB,UAAU,WACrDuB,SAAUrB,KAAKO,eAChB,4BAAQY,KAAK,SAASrB,UAAU,SAASwB,QAAStB,KAAKY,aAAvD,WAEJ,kBAAC,EAAD,CAAUV,KAAQF,KAAKe,MAAMD,WAC7B,kBAAC,EAAD,WA9BZ,GAA+BV,aCUhBmB,G,MAXf,iLAEI,OACE,6BACE,wBAAIN,MAAO,CAACO,UAAW,SAAUN,MAAO,SAAUO,WAAY,UAAWC,SAAU,SAAnF,mBACA,kBAAC,EAAD,WALR,GAAyBtB,cCQLuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.daf12aef.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Avtar.css'\r\n\r\nexport class Avtargen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Avtar\">\r\n                <img src={`https://joeschmoe.io/api/v1/${this.props.name ? this.props.name : 'your name'}`} alt=\"Avtar\"></img>\r\n                <h2>{this.props.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Avtargen\r\n\r\n","import React, { Component } from 'react'\r\nimport './Cooltxt.css'\r\n\r\nexport class Cooltxt extends Component {\r\n    render() {\r\n        return (\r\n            <div >\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cooltxt\r\n","import React, { Component } from 'react'\r\nimport Avtargen from './Avtargen'\r\nimport './Inputstyle.css'\r\nimport Cooltxt from './Cooltxt'\r\n\r\nexport class Inputcomp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputVal: '',\r\n            username: ''\r\n        }\r\n        this.x = ''\r\n    }\r\n    handleChange = (event) => {\r\n       this.x = event.target.value\r\n    //    this.setState({ inputVal: event.target.value });\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({ username: this.x });\r\n        // this.setState({ username: this.state.inputVal });\r\n    }\r\n\r\n    render() {\r\n     \r\n        return (\r\n            <div>\r\n            <div className=\"incomp\">\r\n                <h3 style={{color: 'purple'}} className=\"inputtxt\">Enter your name:-</h3>\r\n                <input type=\"text\" placeholder=\"Enter Name\" className=\"inputbox\"\r\n                 onChange={this.handleChange} ></input>\r\n                <button type=\"button\" className=\"Button\" onClick={this.handleClick}>Submit</button>\r\n            </div>\r\n            <Avtargen name = {this.state.username}/>\r\n            <Cooltxt />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inputcomp\r\n","import React, { Component } from 'react'\nimport Inputcomp from './components/Inputcomp'\nimport './App.css'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1 style={{textAlign: 'center', color: 'purple', fontFamily: 'cursive', fontSize: '40px'}}>Avtar Generator</h1>\n        <Inputcomp />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}